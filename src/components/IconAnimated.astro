---
import type { HTMLAttributes } from "astro/types";
import { icons } from "./IconPaths";

interface Props {
  icon: keyof typeof icons;
  color?: string;
  gradient?: boolean;
  size?: string;
}

const { gradient, icon } = Astro.props;

const { color, viewBox, size, path } = icons[icon];

const attrs: HTMLAttributes<"svg"> = {};
if (size) attrs.style = { "--size": size };

const gradientId =
  "icon-gradient-" + Math.round(Math.random() * 10e12).toString(36);
---

<icon-animated class="icon">
  <div
    class="filled"
    color-onvert={color === "#181717" ? "" : undefined}
    style={{ "--color": color }}
  >
  </div>
  <svg
    xmlns="http://www.w3.org/2000/svg"
    width="32"
    height="32"
    viewBox={viewBox}
    aria-hidden="true"
    {...attrs}
  >
    <g set:html={path} />
    {
      gradient && (
        <linearGradient
          id={gradientId}
          x1="23"
          x2="235"
          y1="43"
          y2="202"
          gradientUnits="userSpaceOnUse"
        >
          <stop stop-color="var(--gradient-stop-1)" />
          <stop offset=".5" stop-color="var(--gradient-stop-2)" />
          <stop offset="1" stop-color="var(--gradient-stop-3)" />
        </linearGradient>
      )
    }
  </svg>
</icon-animated>

<style lang="scss">
  .icon {
    border-radius: 100%;
    position: relative;
    overflow: hidden;
    padding: 8px;
    height: fit-content;
    line-height: 0;
    display: flex;
    align-items: center;
    justify-content: center;

    .filled {
      position: absolute;
      top: auto;
      bottom: 0;
      left: 0;
      width: 100%;
      height: 0;
      transition: all 0.3s ease-in-out;
      z-index: 0;
      background-color: var(--color);
    }

    svg {
      vertical-align: middle;
      width: var(--size, 1em);
      height: var(--size, 1em);
      transition: color 0.5s ease-in-out;
      z-index: 1;
      position: relative;
      g {
        height: 100%;
        width: 100%;
      }
    }

    &:hover {
      .filled {
        height: 100%;
      }

      svg {
        color: var(--bg-color);
      }
    }
  }

  :global(.dark .filled[color-invert]) {
    filter: invert(1);
  }
</style>
