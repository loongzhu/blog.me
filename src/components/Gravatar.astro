---
import { MINE_EMAIL } from "@/consts";
import { Image } from "astro:assets";

/**
 * @param {Props} props
 * @param {string} props.url - The email address to generate the gravatar for (default: mine)  You cao also pass a hash
 * @param {number} props.size - The size of the gravatar (default: 80)
 */
interface Props {
  url?: string;
  size?: number;
}

const validateEmail = (email: string) => {
  return email.match(
    /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/
  );
};

const { url = MINE_EMAIL, size = 80 } = Astro.props;

const isEmail = validateEmail(url);

let avatarUrl;

if (!isEmail) {
  avatarUrl = url;
} else {
  // Can use the CryptoJS.SHA256(url) method too.
  // Because only SHA256 is used here, I used the function sha256.
  // const hashedEmail = CryptoJS.SHA256(url);
  const hashedEmail = await sha256(url);

  avatarUrl = `https://www.gravatar.com/avatar/${hashedEmail}?size=${size}`;
}

/**
 * Generate the SHA-256 hash of the message.
 * @param message The message to hash.
 * @returns The SHA-256 hash of the message.
 */
async function sha256(message: string): Promise<string> {
  // Encode the message string to a Uint8Array using TextEncoder.
  const msgUint8 = new TextEncoder().encode(message);
  // Generate the SHA-256 hash of the message.
  const hashBuffer = await crypto.subtle.digest("SHA-256", msgUint8);
  // Convert the hash buffer to a Uint8Array.
  const hashArray = Array.from(new Uint8Array(hashBuffer));
  // Convert the hash to a hex string.
  const hashHex = hashArray
    .map((b) => b.toString(16).padStart(2, "0"))
    .join("");
  return hashHex;
}
---

<avatar class="avatar" size={size}>
  <Image src={avatarUrl} alt="avatar" width={size} height={size} />
</avatar>

<style lang="scss" define:vars={{ size: `${size}px` }}>
  .avatar {
    width: var(--size);
    height: var(--size);
    display: inline-block;
    overflow: hidden;
    border-radius: 50%;
    box-shadow: var(--box-shadow);

    & > img {
      height: 100%;
      object-fit: cover;
      object-position: center;
    }
  }
</style>
