---
import type { HTMLAttributes } from "astro/types";
import { icons } from "./icons";

interface Props {
  icon: keyof typeof icons;
  color?: string;
  gradient?: boolean;
  size?: string;
}

const { gradient, icon } = Astro.props;

const { color, viewBox, size, path } = icons[icon];

const attrs: HTMLAttributes<"svg"> = {};
if (size) attrs.style = { "--size": size };

const gradientId =
  "icon-gradient-" + Math.round(Math.random() * 10e12).toString(36);
---

<icon-animated class="icon">
  <div
    class="filled"
    color-invert={color === "#181717" ? "" : undefined}
    style={{ "--color": color }}
  >
  </div>
  <svg
    xmlns="http://www.w3.org/2000/svg"
    width="32"
    height="32"
    viewBox={viewBox}
    aria-hidden="true"
    {...attrs}
  >
    <g set:html={path} />
    {
      gradient && (
        <linearGradient
          id={gradientId}
          x1="23"
          x2="235"
          y1="43"
          y2="202"
          gradientUnits="userSpaceOnUse"
        >
          <stop stop-color="var(--gradient-stop-1)" />
          <stop offset=".5" stop-color="var(--gradient-stop-2)" />
          <stop offset="1" stop-color="var(--gradient-stop-3)" />
        </linearGradient>
      )
    }
  </svg>
</icon-animated>

<style lang="scss">
  .icon {
    @apply flex-center h-full p-8 relative overflow-hidden cursor-pointer border-rd-full;

    .filled {
      background-color: var(--color);

      @apply z-0 transition-base top-a h-0 w-full absolute bottom-0 left-0;
    }

    svg {
      width: var(--size, 1em);
      height: var(--size, 1em);

      @apply color-border z-1 relative transition-base vertical-middle;
      g {
        @apply h-full w-full;
      }
    }

    &:hover {
      .filled {
        @apply h-full;
      }

      svg {
        @apply color-bg;
      }
    }
  }

  :global(.dark .filled[color-invert]) {
    filter: invert(1);
  }
</style>
